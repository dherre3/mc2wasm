// Module
Module ::= [Identifier] Functions: WasmFunction* [Start] Type:FuncType* /*Global*  Table* ElementSegment* Memory* DataSegment* Export* Import* */;
abstract TopDeclaration;
// Top Level Declarations
Global: TopDeclaration ::= GlobalType Init:ConstantExpression;
Table: TopDeclaration ::= [Identifier] <TableType:TableType>; // (table $name? limit: max?, min? elemtype:["anyfunc"]
Memory: TopDeclaration::=  [Identifier] MemoryType;
DataSegment: TopDeclaration ::= <MemoryIndex:int> offset:ConstantExpression <Init:String>;
ElementSegment: TopDeclaration ::= <TableIndex:int> Offset:ConstantExpression <Init:java.util.List<Integer>>;
Start: TopDeclaration ::= <FunctionIndex: matwably.ast.Index>;
Export: TopDeclaration ::= <Name:String> <Desc:matwably.ast.ExportDesc>;
Import: TopDeclaration ::= <ModuleName> <Name> <Desc: ImportDesc>;
WasmFunction: TopDeclaration ::= [Identifier] Locals:TypeUse* Parameters: TypeUse*
    <ReturnType:List<ValueType>> Body:Expression;
TypeUse ::= [Identifier] <Type:ValueType>;
// Types
MemoryType::= Limit;
GlobalType ::= <Mut: matwably.ast.Mut> <ValueType:matwably.ast.ValueType>;
TableType::= ElemType:AnyFunc Limits:Limit; //
ValType::= <Type:matwably.ast.ValueType>;
FuncType: TopDeclaration ::= <LocalType: java.util.List<matwably.ast.ValueType>> <ReturnType:java.util.List<matwably.ast.ValueType>>;

// Expressions
Expression ::= Instructions: Instruction*;
ConstantExpression ::= <Instructions: List<ConstLiteral>>;

// Function
Local ::= <Name:String><Type: matwably.ast.ValueType>;

// Instructions
abstract Instruction;
abstract ConstantInstruction: Instruction;
//Const:ConstantInstruction ::= <Value:Number><ValueType:matwably.ast.ValueType>;
Get_Local: Instruction ::= <Index: int>[Identifier];
Set_local: Instruction ::= <Index: int>[Identifier];
Get_global: Instruction ::= <Index: int>[Identifier];
Set_global: Instruction ::= <Index: int>[Identifier];


// Attributes
AnyFunc;
Limit ::= <Min:int> <Max:int>;
Identifier ::= <Name>;

